In .bashrc, .bash_profile, .zshrc
export PATH=${PATH}:/usr/local/mysql/bin

$>mysql start
Run instatnce of mysql DMS.

mysql$>exit; quit; \q; ctrl c;
Quits from mysql command line interface.

$>mysql stop
Stops Mysql server.

To go in 
$>mysql -u root -p
To set user
mysql$>ALTER USER 'root'@'localhost' IDENTIFIED BY 'your_pasword'

CREATE DATABASE your_name_db;
DROP DATABASE your_name_db;
USE your_name_db - tell that we want to talk with some space on server.
SELECT database(); - see what db we are using right now.

TABLES
Relational database - is just a bunch of tables.
Tables hold the data. A collection of related data held in a struvctured format within a database.

Collums (headers)
        /       \
+------------+------------+
| host       | memory     | 
+------------+------------+
| localhost1 |  1.85      | <- row
+------------+------------+
| localhost2 |  2.50      | <- row
+------------+------------+

DATA TYPES
Mixed types of data in collumn is not allowed in sql. Simply, memory column shouldn't have "1.85" and "two fifty"
in rows, because if we want to fire some mathematical operation with these data, we'll fail on "two fifty".
When you creating table - you set data type for each column.

Numeric types:
INT (common), SMALLINT, TINYINT, MEDIUMINT, BIGINT, DECIMAL, NUMERIC, FLOAT, DOUBLE, BIT.
String types:
CHAR, VARCHAR (common), BINARY, VARBINARY, BLOB, TEXT, ENUM, SET. 
Date types:
DATE, DATETIME, TIMESTAMP, TIME, YEAR

INT - whole number, form -4294967295 to 4294967295
VARCHAR - 'variation characters' length. from 1 to 255 characters.

Each variable (int, or varchar) - still has set length. So that's why we need to check sometimes does the field
contain 100 chars, and doesn't contain 101.

Table
CREATE TABLE table_name (column_name1 data_type, column_name2 data_type);
mysql$>create table users(name varchar(15), age int);

SHOW COLUMNS FROM table_name; ( in this context simular to describe command - DESC table_name;)

DROP TABLE table_name;

INSERT DATA
insert into table_name(column_name1, column_name2) values(value_for_column1, value_for_2);
insert into table_name(column_name1, column_name2)
 values(value1_for_column1, value1_for_2)
        ,(value2_for_column1, value2_for_2); - we can set a few rows at once.

If you typed a insert into a(c1, c2) values(1) - even if c2 column has default value - you'll get an error.

strings inserted only inquotes ""|''. column names order matters.

Example of mysql$>DESC tweets;
+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| author     | varchar(15)  | YES  |     | NULL    |       |
| tweet_text | varchar(140) | YES  |     | NULL    |       |
| likes      | int(11)      | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+

SQL WARNINNGS
In previous versions of mysql if data is too long for example - it will be truncated - that's warning.
But as I see now, in 8th version - that's an error.
You can see SHOW ERRORS, or SHOW WARNING, to see the last messages (works not so properly)
If there were two simular warnings in row - it won't show it. I dunno why.

NULL value
NULL in sql means - "Value is unknown" - doesn't mean zero!
in desc table there is NULL column - if there is YES, then value or row can be NULL, means you can leave this 
row value unset - with NULL. You can even "insert into table_name() values()" - and it will set NULL from values
in whole row.
To specify that value cannot be null - we can set NOT NULL into column data type when we crating table.
mysql$>create table users(name varchar(15) not null, age int not null);
And in NULL column you'll see NO value.
If we try to leave some value unset in this table - we'll get warning and we'll have 0 as a default value in table
for examlpe. OR if we try to set NULL manualy - we'll get error.
Same thing with string, - default for it is empty string, not null.

DEFAUL VALUE
There is Default column in desc table, so if value is unset - default value comes into play.
We can manage it when creating table.
mysql$>create table cats(name varchar(15) default 'unnamed', age int default 1, lives int default 9)

KEY
          cats
+---------+------+-------+
| name    | age  | lives |
+---------+------+-------+
| Blue    |    5 |     9 |
| Blue    |    5 |     9 |
+---------+------+-------+

In this case we have two different cats but with same data. And we have no ability to unify them.
Query will return first cat and htat's all.
So to solve this we need to add some ID to cats.
And there is a term for this - Primary key. This is unic identifier for row of data.

create table unic_cats(cat_id int not null, name varchar(15) not null default 'unnamed',
 age int not null default 0, primary key(cat_id));

will create table with unic identifier;

desc unic_cats;
+--------+-------------+------+-----+---------+----------------+
| Field  | Type        | Null | Key | Default | Extra          |
+--------+-------------+------+-----+---------+----------------+
| cat_id | int(11)     | NO   | PRI | NULL    | auto_increment |
| name   | varchar(15) | NO   |     | unnamed |                |
| age    | int(11)     | NO   |     | 0       |                |
+--------+-------------+------+-----+---------+----------------+

After that we cannot add "insert into unic_cats(name, age, cat_id) values('Blue', 5, 1);" twice.
We will be forced to set unic identifier to cat_it.
We can also set name, or age a primary key, to make it unic. 

To not set cat_id each time manualy, we cat set AUTO_INCREMENT to it.
create table unic_cats(cat_id int not null auto_increment primary key, name varchar(15) not null default 'unnamed',
 age int not null default 0);
sic! primary key - not in the end like primary key(cat_id), but after cat_id in columns section of the query.

CRUD
create (create table table_name(), insert into table_name() values(), ()),
read (desc, show, select),
update (),
delete (drop)

SELECT
* - means give me all the collumns from table.

Select expression - more complex query.
mysql$>select column_name1, column_name2 from table_name; - return only queried columns. Order of column is matter.

where
More specific selection. can be used with update, and delete.
mysql$>select * from table_name where column_name1 condition1 and condition2;
mysql$>select column_name1, column_name2 from table_name where column_name1 condition1 and condition2;

mysql$>select age, name from unic_cats where age=4 and name = 'Egg'; (or 'egg/EGG') -> by default case not matter
mysql$>select age, name from unic_cats where age=cat_id; (sql got that I want from unic_cats)

alias
Selecting data and renaming column names to their to be more readable to you.
mysql$>SELECT age AS years, name as 'cat name' FROM unic_cats; (to use space in column name - use quotes '')
+-------+----------+
| years | cat name |
+-------+----------+
|     5 | Ringo    |
|     4 | Jackson  |
+-------+----------+
And you'll get 'years' and 'cat name' istead of age and name in column names.

UPDATE
Update some data in tables.
UPDATE table_name SET column1='value1' where column2='value2'
find all rows with 'value2' in column2, and update for them column1 values to 'value1'

mysql$>update unic_cats set age=10 where cat_id=1;
Be aware that in safe mode updating allowed only by KEY (primary, foreign), so you need to use it. 

It's a good practice to first run SELECT rows that you want to update before fire the UPDATE query.

DELETE
drop table table_name;
DELETE FROM table_name WHERE condition;
DELETE FROM unic_cats WHERE name='Egg';

Also it's nice to type SELECT instead of DELETE to see what you're going to delete.
There is no undo button.

delete from table_name; - will delete all data from table, be carefull.

STRING FUNCTIONS
We can do a lot of stuff with values from db. Reverse strings, change names, change part of
names, values.

To help doing that, easily to run functions - we car run some sql code from file.
For that just create file with .sql extention, i.e. myQuery.sql
mysql$>source path_to_file/myQuery.sql - it will run every querie from this file.

There are a lot of string functions in documentation.
https://dev.mysql.com/doc/refman/8.0/en/string-functions.html

Concat()
Combine pieces of data together.
SELECT CONCAT(column_name1, 'my text', ' ', column_name2, 'another text') from table_name;
SELECT concat(author_fname, ' ', author_lname) AS 'full name', released_year from books;

We can specify as manyy columns and functions as we need.
If we need some common separator for all concatinating values we can use concat_ws with separator.
SELECT concat_ws('-', author_fname, author_lname) from books;

Substring()
SUBSTING() same as SUBSTR() - it's a shortcut.
SELECT SUBSTING(column_name, start_index, end_index) as "needed_name";
SELECT SUBSTING('value', 1, 3); - will print first 3 characters from 'value' - 'val'; In SQL indexes of 
value begin with 1, not 0.
SELECT SUBSTING('value', 2); - from 2nd index (include) to the end - 'alue'
SELECT SUBSTING('value', -2); - till 2nd index (include) from end of string - 'ue'

Combining - SELECT CONCAT(SUBSTRING(column_value, 1, 5), '...') AS 'needed_name' from table_name;

Replace()
SELECT REPLACE(column_name, 'value_to_replace', 'needed_replacement') from books;

Reverse()
SELECT REVERSE(column_name) from books;

Char_length()
CHAR_LENGTH(column_name) from books - will give you length of string.
SELECT CONCAT(author_fname, ' is ', CHAR_LENGTH(author_fname), ' charachters long') FROM books;
wil give you 'Neil is 4 charachters long'.

UPPER()/LOWER() - you got it.
UPPER/LOWER only takes one argument, be carefull.

JOIN
So we join tables on some condition, 
INNER - (as simple JOIN) returns only rows for those when condition is met.
LEFT - return all rows from left side of JOIN word table, rows from right table - only that met condition,
when condition isn't met - nulls in cells.
RIGHT - opposite to left.
FULL - returns all rows from two tables.

SELECT
  t1_column_name1, t1_column_name2, t1_column_name2,
FROM
  table_name1
JOIN (same as inner join)
  table_name2
ON
  t5_column_name1=t7_column_name2
WHERE/ORDER BY
  predicard_expression