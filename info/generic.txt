GENERIC

Database - collection of data, structured set of computerizad data with an accessible interface.
Database Management System, DMS, Related DMS - interface for Database.
Your app <-> DMS <-> Database
Related databases PostreSQL, Oracle Database, MySQL, SQLite - technicaly they are not Databases, they are DMS',
and they ALL using SQL language for their queries (because they are related)

MySQL vs SQL
SQL "structured query language"
SQL - is language, language that we're using to "talk" to our databases, every our "question" - is a query.
So SQL is a standart that all DMS implement. So there a slight differences in implementation of SQL in 
different DMS, but still they're using SQL.

SQL is the standard language for Relational Database System. All the Relational Database Management Systems (RDMS)
like MySQL, MS Access, Oracle, Sybase, Informix, Postgres and SQL Server use SQL as their standard database language.

So when we talking to MySQL - we use SQL language, because as it was said MySQL is a DMS, difference between
DMS' are the features that these DMS' offer, not the language that their using (since it not much different).
Features like, how secure, how fast, how big is upload, permissions to work.

Mysql Server
Server can contain a lot of databases, shop database (with users, payments, etc.), soup shop db (with users, payments, etc.).
So when we crate a database, we creating space in mysql server where we can add data.
Defaul port is 3306



SQL vs NoSQL
SQL (PostgreSQL, MS SQL, Oracle)
DMS' - structured dbs, with strict order and data types, relational dbs, where everything divided into tables connected to each other. 
SQL has few principles: 
ACID (Atomicity, Consistency, Isolation, Durability — атомарность, непротиворечивость, изолированность, долговечность)

NoSQL (MongoDB, CouchDB, Cassandra, HBase)
No-relational db, on the other hand more agile and extendable, with different type of data that they store, NoSQL dbs has no restriction
about the type of stored data.
In front of relational dbs, nosql - can add new data types while working, and cloud storage and computing power of cloud, 
So cloud storage can be used by few servers simultaniously.
Much more easy to use that relational, doesn't need to be setuped so long.

So db selection depends on aim amd condition of project.
If we have stable, clear requirements, we need checked mature technology, and data consistency, solidness - SQL
No clear requiraments, speed of development, aim of project will be chosen while development is on - nosql.

